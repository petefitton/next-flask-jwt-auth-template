"""
This type stub file was generated by pyright.
"""

import asyncio
import collections
import sys
from typing import Any, AsyncIterator, Deque, Iterator, NoReturn, Optional, Sequence, TYPE_CHECKING, Tuple, Type
from ..engine import AdaptedConnection
from ..util import EMPTY_DICT
from ..util.concurrency import await_fallback, await_only, in_greenlet
from ..util.typing import Protocol, Self
from ..engine.interfaces import DBAPIModule, _DBAPICursorDescription, _DBAPIMultiExecuteParams, _DBAPISingleExecuteParams

"""generic asyncio-adapted versions of DBAPI connection and cursor"""
if TYPE_CHECKING:
    ...
class AsyncIODBAPIConnection(Protocol):
    """protocol representing an async adapted version of a
    :pep:`249` database connection.


    """
    async def commit(self) -> None:
        ...
    
    def cursor(self, *args: Any, **kwargs: Any) -> AsyncIODBAPICursor:
        ...
    
    async def rollback(self) -> None:
        ...
    
    def __getattr__(self, key: str) -> Any:
        ...
    
    def __setattr__(self, key: str, value: Any) -> None:
        ...
    


class AsyncIODBAPICursor(Protocol):
    """protocol representing an async adapted version
    of a :pep:`249` database cursor.


    """
    def __aenter__(self) -> Any:
        ...
    
    @property
    def description(self) -> _DBAPICursorDescription:
        """The description attribute of the Cursor."""
        ...
    
    @property
    def rowcount(self) -> int:
        ...
    
    arraysize: int
    lastrowid: int
    async def close(self) -> None:
        ...
    
    async def execute(self, operation: Any, parameters: Optional[_DBAPISingleExecuteParams] = ...) -> Any:
        ...
    
    async def executemany(self, operation: Any, parameters: _DBAPIMultiExecuteParams) -> Any:
        ...
    
    async def fetchone(self) -> Optional[Any]:
        ...
    
    async def fetchmany(self, size: Optional[int] = ...) -> Sequence[Any]:
        ...
    
    async def fetchall(self) -> Sequence[Any]:
        ...
    
    async def setinputsizes(self, sizes: Sequence[Any]) -> None:
        ...
    
    def setoutputsize(self, size: Any, column: Any) -> None:
        ...
    
    async def callproc(self, procname: str, parameters: Sequence[Any] = ...) -> Any:
        ...
    
    async def nextset(self) -> Optional[bool]:
        ...
    
    def __aiter__(self) -> AsyncIterator[Any]:
        ...
    


class AsyncAdapt_dbapi_module:
    if TYPE_CHECKING:
        Error = DBAPIModule.Error
        OperationalError = DBAPIModule.OperationalError
        InterfaceError = DBAPIModule.InterfaceError
        IntegrityError = DBAPIModule.IntegrityError
        def __getattr__(self, key: str) -> Any:
            ...
        


class AsyncAdapt_dbapi_cursor:
    server_side = ...
    __slots__ = ...
    _awaitable_cursor_close: bool = ...
    _cursor: AsyncIODBAPICursor
    _adapt_connection: AsyncAdapt_dbapi_connection
    _connection: AsyncIODBAPIConnection
    _rows: Deque[Any]
    def __init__(self, adapt_connection: AsyncAdapt_dbapi_connection) -> None:
        ...
    
    @property
    def description(self) -> Optional[_DBAPICursorDescription]:
        ...
    
    @property
    def rowcount(self) -> int:
        ...
    
    @property
    def arraysize(self) -> int:
        ...
    
    @arraysize.setter
    def arraysize(self, value: int) -> None:
        ...
    
    @property
    def lastrowid(self) -> int:
        ...
    
    def close(self) -> None:
        ...
    
    def execute(self, operation: Any, parameters: Optional[_DBAPISingleExecuteParams] = ...) -> Any:
        ...
    
    def executemany(self, operation: Any, seq_of_parameters: _DBAPIMultiExecuteParams) -> Any:
        ...
    
    def nextset(self) -> None:
        ...
    
    def setinputsizes(self, *inputsizes: Any) -> None:
        ...
    
    def __enter__(self) -> Self:
        ...
    
    def __exit__(self, type_: Any, value: Any, traceback: Any) -> None:
        ...
    
    def __iter__(self) -> Iterator[Any]:
        ...
    
    def fetchone(self) -> Optional[Any]:
        ...
    
    def fetchmany(self, size: Optional[int] = ...) -> Sequence[Any]:
        ...
    
    def fetchall(self) -> Sequence[Any]:
        ...
    


class AsyncAdapt_dbapi_ss_cursor(AsyncAdapt_dbapi_cursor):
    __slots__ = ...
    server_side = ...
    def close(self) -> None:
        ...
    
    def fetchone(self) -> Optional[Any]:
        ...
    
    def fetchmany(self, size: Optional[int] = ...) -> Any:
        ...
    
    def fetchall(self) -> Sequence[Any]:
        ...
    
    def __iter__(self) -> Iterator[Any]:
        ...
    


class AsyncAdapt_dbapi_connection(AdaptedConnection):
    _cursor_cls = AsyncAdapt_dbapi_cursor
    _ss_cursor_cls = AsyncAdapt_dbapi_ss_cursor
    await_ = ...
    __slots__ = ...
    _connection: AsyncIODBAPIConnection
    def __init__(self, dbapi: Any, connection: AsyncIODBAPIConnection) -> None:
        ...
    
    def cursor(self, server_side: bool = ...) -> AsyncAdapt_dbapi_cursor:
        ...
    
    def execute(self, operation: Any, parameters: Optional[_DBAPISingleExecuteParams] = ...) -> Any:
        """lots of DBAPIs seem to provide this, so include it"""
        ...
    
    def rollback(self) -> None:
        ...
    
    def commit(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    


class AsyncAdaptFallback_dbapi_connection(AsyncAdapt_dbapi_connection):
    __slots__ = ...
    await_ = ...


class AsyncAdapt_terminate:
    """Mixin for a AsyncAdapt_dbapi_connection to add terminate support."""
    __slots__ = ...
    def terminate(self) -> None:
        ...
    


