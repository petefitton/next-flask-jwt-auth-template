"""
This type stub file was generated by pyright.
"""

import collections.abc as cabc
import typing as t
import typing_extensions as te
from copy import deepcopy
from .. import exceptions, http
from .._internal import _missing
from .mixins import ImmutableDictMixin, ImmutableListMixin, ImmutableMultiDictMixin, UpdateDictMixin

if t.TYPE_CHECKING:
    ...
K = t.TypeVar("K")
V = t.TypeVar("V")
T = t.TypeVar("T")
def iter_multi_items(mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]])) -> cabc.Iterator[tuple[K, V]]:
    """Iterates over the items of a mapping yielding keys and values
    without dropping any from more complex structures.
    """
    ...

class ImmutableList(ImmutableListMixin, list[V]):
    """An immutable :class:`list`.

    .. versionadded:: 0.5

    :private:
    """
    def __repr__(self) -> str:
        ...
    


class TypeConversionDict(dict[K, V]):
    """Works like a regular dict but the :meth:`get` method can perform
    type conversions.  :class:`MultiDict` and :class:`CombinedMultiDict`
    are subclasses of this class and provide the same feature.

    .. versionadded:: 0.5
    """
    @t.overload
    def get(self, key: K) -> V | None:
        ...
    
    @t.overload
    def get(self, key: K, default: V) -> V:
        ...
    
    @t.overload
    def get(self, key: K, default: T) -> V | T:
        ...
    
    @t.overload
    def get(self, key: str, type: cabc.Callable[[V], T]) -> T | None:
        ...
    
    @t.overload
    def get(self, key: str, default: T, type: cabc.Callable[[V], T]) -> T:
        ...
    
    def get(self, key: K, default: V | T | None = ..., type: cabc.Callable[[V], T] | None = ...) -> V | T | None:
        """Return the default value if the requested data doesn't exist.
        If `type` is provided and is a callable it should convert the value,
        return it or raise a :exc:`ValueError` if that is not possible.  In
        this case the function will return the default as if the value was not
        found:

        >>> d = TypeConversionDict(foo='42', bar='blub')
        >>> d.get('foo', type=int)
        42
        >>> d.get('bar', -1, type=int)
        -1

        :param key: The key to be looked up.
        :param default: The default value to be returned if the key can't
                        be looked up.  If not further specified `None` is
                        returned.
        :param type: A callable that is used to cast the value in the
                     :class:`MultiDict`.  If a :exc:`ValueError` or a
                     :exc:`TypeError` is raised by this callable the default
                     value is returned.

        .. versionchanged:: 3.0.2
           Returns the default value on :exc:`TypeError`, too.
        """
        ...
    


class ImmutableTypeConversionDict(ImmutableDictMixin[K, V], TypeConversionDict[K, V]):
    """Works like a :class:`TypeConversionDict` but does not support
    modifications.

    .. versionadded:: 0.5
    """
    def copy(self) -> TypeConversionDict[K, V]:
        """Return a shallow mutable copy of this object.  Keep in mind that
        the standard library's :func:`copy` function is a no-op for this class
        like for any other python immutable type (eg: :class:`tuple`).
        """
        ...
    
    def __copy__(self) -> te.Self:
        ...
    


class MultiDict(TypeConversionDict[K, V]):
    """A :class:`MultiDict` is a dictionary subclass customized to deal with
    multiple values for the same key which is for example used by the parsing
    functions in the wrappers.  This is necessary because some HTML form
    elements pass multiple values for the same key.

    :class:`MultiDict` implements all standard dictionary methods.
    Internally, it saves all values for a key as a list, but the standard dict
    access methods will only return the first value for a key. If you want to
    gain access to the other values, too, you have to use the `list` methods as
    explained below.

    Basic Usage:

    >>> d = MultiDict([('a', 'b'), ('a', 'c')])
    >>> d
    MultiDict([('a', 'b'), ('a', 'c')])
    >>> d['a']
    'b'
    >>> d.getlist('a')
    ['b', 'c']
    >>> 'a' in d
    True

    It behaves like a normal dict thus all dict functions will only return the
    first value when multiple values for one key are found.

    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a
    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will
    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP
    exceptions.

    A :class:`MultiDict` can be constructed from an iterable of
    ``(key, value)`` tuples, a dict, a :class:`MultiDict` or from Werkzeug 0.2
    onwards some keyword parameters.

    :param mapping: the initial value for the :class:`MultiDict`.  Either a
                    regular dict, an iterable of ``(key, value)`` tuples
                    or `None`.

    .. versionchanged:: 3.1
        Implement ``|`` and ``|=`` operators.
    """
    def __init__(self, mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]] | None) = ...) -> None:
        ...
    
    def __getstate__(self) -> t.Any:
        ...
    
    def __setstate__(self, value: t.Any) -> None:
        ...
    
    def __iter__(self) -> cabc.Iterator[K]:
        ...
    
    def __getitem__(self, key: K) -> V:
        """Return the first data value for this key;
        raises KeyError if not found.

        :param key: The key to be looked up.
        :raise KeyError: if the key does not exist.
        """
        ...
    
    def __setitem__(self, key: K, value: V) -> None:
        """Like :meth:`add` but removes an existing key first.

        :param key: the key for the value.
        :param value: the value to set.
        """
        ...
    
    def add(self, key: K, value: V) -> None:
        """Adds a new value for the key.

        .. versionadded:: 0.6

        :param key: the key for the value.
        :param value: the value to add.
        """
        ...
    
    @t.overload
    def getlist(self, key: K) -> list[V]:
        ...
    
    @t.overload
    def getlist(self, key: K, type: cabc.Callable[[V], T]) -> list[T]:
        ...
    
    def getlist(self, key: K, type: cabc.Callable[[V], T] | None = ...) -> list[V] | list[T]:
        """Return the list of items for a given key. If that key is not in the
        `MultiDict`, the return value will be an empty list.  Just like `get`,
        `getlist` accepts a `type` parameter.  All items will be converted
        with the callable defined there.

        :param key: The key to be looked up.
        :param type: Callable to convert each value. If a ``ValueError`` or
            ``TypeError`` is raised, the value is omitted.
        :return: a :class:`list` of all the values for the key.

        .. versionchanged:: 3.1
            Catches ``TypeError`` in addition to ``ValueError``.
        """
        ...
    
    def setlist(self, key: K, new_list: cabc.Iterable[V]) -> None:
        """Remove the old values for a key and add new ones.  Note that the list
        you pass the values in will be shallow-copied before it is inserted in
        the dictionary.

        >>> d = MultiDict()
        >>> d.setlist('foo', ['1', '2'])
        >>> d['foo']
        '1'
        >>> d.getlist('foo')
        ['1', '2']

        :param key: The key for which the values are set.
        :param new_list: An iterable with the new values for the key.  Old values
                         are removed first.
        """
        ...
    
    @t.overload
    def setdefault(self, key: K) -> None:
        ...
    
    @t.overload
    def setdefault(self, key: K, default: V) -> V:
        ...
    
    def setdefault(self, key: K, default: V | None = ...) -> V | None:
        """Returns the value for the key if it is in the dict, otherwise it
        returns `default` and sets that value for `key`.

        :param key: The key to be looked up.
        :param default: The default value to be returned if the key is not
                        in the dict.  If not further specified it's `None`.
        """
        ...
    
    def setlistdefault(self, key: K, default_list: cabc.Iterable[V] | None = ...) -> list[V]:
        """Like `setdefault` but sets multiple values.  The list returned
        is not a copy, but the list that is actually used internally.  This
        means that you can put new values into the dict by appending items
        to the list:

        >>> d = MultiDict({"foo": 1})
        >>> d.setlistdefault("foo").extend([2, 3])
        >>> d.getlist("foo")
        [1, 2, 3]

        :param key: The key to be looked up.
        :param default_list: An iterable of default values.  It is either copied
                             (in case it was a list) or converted into a list
                             before returned.
        :return: a :class:`list`
        """
        ...
    
    def items(self, multi: bool = ...) -> cabc.Iterable[tuple[K, V]]:
        """Return an iterator of ``(key, value)`` pairs.

        :param multi: If set to `True` the iterator returned will have a pair
                      for each value of each key.  Otherwise it will only
                      contain pairs for the first value of each key.
        """
        ...
    
    def lists(self) -> cabc.Iterable[tuple[K, list[V]]]:
        """Return a iterator of ``(key, values)`` pairs, where values is the list
        of all values associated with the key."""
        ...
    
    def values(self) -> cabc.Iterable[V]:
        """Returns an iterator of the first value on every key's value list."""
        ...
    
    def listvalues(self) -> cabc.Iterable[list[V]]:
        """Return an iterator of all values associated with a key.  Zipping
        :meth:`keys` and this is the same as calling :meth:`lists`:

        >>> d = MultiDict({"foo": [1, 2, 3]})
        >>> zip(d.keys(), d.listvalues()) == d.lists()
        True
        """
        ...
    
    def copy(self) -> te.Self:
        """Return a shallow copy of this object."""
        ...
    
    def deepcopy(self, memo: t.Any = ...) -> te.Self:
        """Return a deep copy of this object."""
        ...
    
    @t.overload
    def to_dict(self) -> dict[K, V]:
        ...
    
    @t.overload
    def to_dict(self, flat: t.Literal[False]) -> dict[K, list[V]]:
        ...
    
    def to_dict(self, flat: bool = ...) -> dict[K, V] | dict[K, list[V]]:
        """Return the contents as regular dict.  If `flat` is `True` the
        returned dict will only have the first item present, if `flat` is
        `False` all values will be returned as lists.

        :param flat: If set to `False` the dict returned will have lists
                     with all the values in it.  Otherwise it will only
                     contain the first value for each key.
        :return: a :class:`dict`
        """
        ...
    
    def update(self, mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]])) -> None:
        """update() extends rather than replaces existing key lists:

        >>> a = MultiDict({'x': 1})
        >>> b = MultiDict({'x': 2, 'y': 3})
        >>> a.update(b)
        >>> a
        MultiDict([('y', 3), ('x', 1), ('x', 2)])

        If the value list for a key in ``other_dict`` is empty, no new values
        will be added to the dict and the key will not be created:

        >>> x = {'empty_list': []}
        >>> y = MultiDict()
        >>> y.update(x)
        >>> y
        MultiDict([])
        """
        ...
    
    def __or__(self, other: cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]]) -> MultiDict[K, V]:
        ...
    
    def __ior__(self, other: (cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]])) -> te.Self:
        ...
    
    @t.overload
    def pop(self, key: K) -> V:
        ...
    
    @t.overload
    def pop(self, key: K, default: V) -> V:
        ...
    
    @t.overload
    def pop(self, key: K, default: T) -> V | T:
        ...
    
    def pop(self, key: K, default: V | T = ...) -> V | T:
        """Pop the first item for a list on the dict.  Afterwards the
        key is removed from the dict, so additional values are discarded:

        >>> d = MultiDict({"foo": [1, 2, 3]})
        >>> d.pop("foo")
        1
        >>> "foo" in d
        False

        :param key: the key to pop.
        :param default: if provided the value to return if the key was
                        not in the dictionary.
        """
        ...
    
    def popitem(self) -> tuple[K, V]:
        """Pop an item from the dict."""
        ...
    
    def poplist(self, key: K) -> list[V]:
        """Pop the list for a key from the dict.  If the key is not in the dict
        an empty list is returned.

        .. versionchanged:: 0.5
           If the key does no longer exist a list is returned instead of
           raising an error.
        """
        ...
    
    def popitemlist(self) -> tuple[K, list[V]]:
        """Pop a ``(key, list)`` tuple from the dict."""
        ...
    
    def __copy__(self) -> te.Self:
        ...
    
    def __deepcopy__(self, memo: t.Any) -> te.Self:
        ...
    
    def __repr__(self) -> str:
        ...
    


class _omd_bucket(t.Generic[K, V]):
    """Wraps values in the :class:`OrderedMultiDict`.  This makes it
    possible to keep an order over multiple different keys.  It requires
    a lot of extra memory and slows down access a lot, but makes it
    possible to access elements in O(1) and iterate in O(n).
    """
    __slots__ = ...
    def __init__(self, omd: _OrderedMultiDict[K, V], key: K, value: V) -> None:
        ...
    
    def unlink(self, omd: _OrderedMultiDict[K, V]) -> None:
        ...
    


class _OrderedMultiDict(MultiDict[K, V]):
    """Works like a regular :class:`MultiDict` but preserves the
    order of the fields.  To convert the ordered multi dict into a
    list you can use the :meth:`items` method and pass it ``multi=True``.

    In general an :class:`OrderedMultiDict` is an order of magnitude
    slower than a :class:`MultiDict`.

    .. admonition:: note

       Due to a limitation in Python you cannot convert an ordered
       multi dict into a regular dict by using ``dict(multidict)``.
       Instead you have to use the :meth:`to_dict` method, otherwise
       the internal bucket objects are exposed.

    .. deprecated:: 3.1
        Will be removed in Werkzeug 3.2. Use ``MultiDict`` instead.
    """
    def __init__(self, mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]] | None) = ...) -> None:
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    __hash__ = ...
    def __reduce_ex__(self, protocol: t.SupportsIndex) -> t.Any:
        ...
    
    def __getstate__(self) -> t.Any:
        ...
    
    def __setstate__(self, values: t.Any) -> None:
        ...
    
    def __getitem__(self, key: K) -> V:
        ...
    
    def __setitem__(self, key: K, value: V) -> None:
        ...
    
    def __delitem__(self, key: K) -> None:
        ...
    
    def keys(self) -> cabc.Iterable[K]:
        ...
    
    def __iter__(self) -> cabc.Iterator[K]:
        ...
    
    def values(self) -> cabc.Iterable[V]:
        ...
    
    def items(self, multi: bool = ...) -> cabc.Iterable[tuple[K, V]]:
        ...
    
    def lists(self) -> cabc.Iterable[tuple[K, list[V]]]:
        ...
    
    def listvalues(self) -> cabc.Iterable[list[V]]:
        ...
    
    def add(self, key: K, value: V) -> None:
        ...
    
    @t.overload
    def getlist(self, key: K) -> list[V]:
        ...
    
    @t.overload
    def getlist(self, key: K, type: cabc.Callable[[V], T]) -> list[T]:
        ...
    
    def getlist(self, key: K, type: cabc.Callable[[V], T] | None = ...) -> list[V] | list[T]:
        ...
    
    def setlist(self, key: K, new_list: cabc.Iterable[V]) -> None:
        ...
    
    def setlistdefault(self, key: t.Any, default_list: t.Any = ...) -> t.NoReturn:
        ...
    
    def update(self, mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]])) -> None:
        ...
    
    def poplist(self, key: K) -> list[V]:
        ...
    
    @t.overload
    def pop(self, key: K) -> V:
        ...
    
    @t.overload
    def pop(self, key: K, default: V) -> V:
        ...
    
    @t.overload
    def pop(self, key: K, default: T) -> V | T:
        ...
    
    def pop(self, key: K, default: V | T = ...) -> V | T:
        ...
    
    def popitem(self) -> tuple[K, V]:
        ...
    
    def popitemlist(self) -> tuple[K, list[V]]:
        ...
    


class CombinedMultiDict(ImmutableMultiDictMixin[K, V], MultiDict[K, V]):
    """A read only :class:`MultiDict` that you can pass multiple :class:`MultiDict`
    instances as sequence and it will combine the return values of all wrapped
    dicts:

    >>> from werkzeug.datastructures import CombinedMultiDict, MultiDict
    >>> post = MultiDict([('foo', 'bar')])
    >>> get = MultiDict([('blub', 'blah')])
    >>> combined = CombinedMultiDict([get, post])
    >>> combined['foo']
    'bar'
    >>> combined['blub']
    'blah'

    This works for all read operations and will raise a `TypeError` for
    methods that usually change data which isn't possible.

    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a
    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will
    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP
    exceptions.
    """
    def __reduce_ex__(self, protocol: t.SupportsIndex) -> t.Any:
        ...
    
    def __init__(self, dicts: cabc.Iterable[MultiDict[K, V]] | None = ...) -> None:
        ...
    
    @classmethod
    def fromkeys(cls, keys: t.Any, value: t.Any = ...) -> t.NoReturn:
        ...
    
    def __getitem__(self, key: K) -> V:
        ...
    
    @t.overload
    def get(self, key: K) -> V | None:
        ...
    
    @t.overload
    def get(self, key: K, default: V) -> V:
        ...
    
    @t.overload
    def get(self, key: K, default: T) -> V | T:
        ...
    
    @t.overload
    def get(self, key: str, type: cabc.Callable[[V], T]) -> T | None:
        ...
    
    @t.overload
    def get(self, key: str, default: T, type: cabc.Callable[[V], T]) -> T:
        ...
    
    def get(self, key: K, default: V | T | None = ..., type: cabc.Callable[[V], T] | None = ...) -> V | T | None:
        ...
    
    @t.overload
    def getlist(self, key: K) -> list[V]:
        ...
    
    @t.overload
    def getlist(self, key: K, type: cabc.Callable[[V], T]) -> list[T]:
        ...
    
    def getlist(self, key: K, type: cabc.Callable[[V], T] | None = ...) -> list[V] | list[T]:
        ...
    
    def keys(self) -> cabc.Iterable[K]:
        ...
    
    def __iter__(self) -> cabc.Iterator[K]:
        ...
    
    @t.overload
    def items(self) -> cabc.Iterable[tuple[K, V]]:
        ...
    
    @t.overload
    def items(self, multi: t.Literal[True]) -> cabc.Iterable[tuple[K, list[V]]]:
        ...
    
    def items(self, multi: bool = ...) -> cabc.Iterable[tuple[K, V]] | cabc.Iterable[tuple[K, list[V]]]:
        ...
    
    def values(self) -> cabc.Iterable[V]:
        ...
    
    def lists(self) -> cabc.Iterable[tuple[K, list[V]]]:
        ...
    
    def listvalues(self) -> cabc.Iterable[list[V]]:
        ...
    
    def copy(self) -> MultiDict[K, V]:
        """Return a shallow mutable copy of this object.

        This returns a :class:`MultiDict` representing the data at the
        time of copying. The copy will no longer reflect changes to the
        wrapped dicts.

        .. versionchanged:: 0.15
            Return a mutable :class:`MultiDict`.
        """
        ...
    
    def __len__(self) -> int:
        ...
    
    def __contains__(self, key: K) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    


class ImmutableDict(ImmutableDictMixin[K, V], dict[K, V]):
    """An immutable :class:`dict`.

    .. versionadded:: 0.5
    """
    def __repr__(self) -> str:
        ...
    
    def copy(self) -> dict[K, V]:
        """Return a shallow mutable copy of this object.  Keep in mind that
        the standard library's :func:`copy` function is a no-op for this class
        like for any other python immutable type (eg: :class:`tuple`).
        """
        ...
    
    def __copy__(self) -> te.Self:
        ...
    


class ImmutableMultiDict(ImmutableMultiDictMixin[K, V], MultiDict[K, V]):
    """An immutable :class:`MultiDict`.

    .. versionadded:: 0.5
    """
    def copy(self) -> MultiDict[K, V]:
        """Return a shallow mutable copy of this object.  Keep in mind that
        the standard library's :func:`copy` function is a no-op for this class
        like for any other python immutable type (eg: :class:`tuple`).
        """
        ...
    
    def __copy__(self) -> te.Self:
        ...
    


class _ImmutableOrderedMultiDict(ImmutableMultiDictMixin[K, V], _OrderedMultiDict[K, V]):
    """An immutable :class:`OrderedMultiDict`.

    .. deprecated:: 3.1
        Will be removed in Werkzeug 3.2. Use ``ImmutableMultiDict`` instead.

    .. versionadded:: 0.6
    """
    def __init__(self, mapping: (MultiDict[K, V] | cabc.Mapping[K, V | list[V] | tuple[V, ...] | set[V]] | cabc.Iterable[tuple[K, V]] | None) = ...) -> None:
        ...
    
    def copy(self) -> _OrderedMultiDict[K, V]:
        """Return a shallow mutable copy of this object.  Keep in mind that
        the standard library's :func:`copy` function is a no-op for this class
        like for any other python immutable type (eg: :class:`tuple`).
        """
        ...
    
    def __copy__(self) -> te.Self:
        ...
    


class CallbackDict(UpdateDictMixin[K, V], dict[K, V]):
    """A dict that calls a function passed every time something is changed.
    The function is passed the dict instance.
    """
    def __init__(self, initial: cabc.Mapping[K, V] | cabc.Iterable[tuple[K, V]] | None = ..., on_update: cabc.Callable[[te.Self], None] | None = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class HeaderSet(cabc.MutableSet[str]):
    """Similar to the :class:`ETags` class this implements a set-like structure.
    Unlike :class:`ETags` this is case insensitive and used for vary, allow, and
    content-language headers.

    If not constructed using the :func:`parse_set_header` function the
    instantiation works like this:

    >>> hs = HeaderSet(['foo', 'bar', 'baz'])
    >>> hs
    HeaderSet(['foo', 'bar', 'baz'])
    """
    def __init__(self, headers: cabc.Iterable[str] | None = ..., on_update: cabc.Callable[[te.Self], None] | None = ...) -> None:
        ...
    
    def add(self, header: str) -> None:
        """Add a new header to the set."""
        ...
    
    def remove(self: te.Self, header: str) -> None:
        """Remove a header from the set.  This raises an :exc:`KeyError` if the
        header is not in the set.

        .. versionchanged:: 0.5
            In older versions a :exc:`IndexError` was raised instead of a
            :exc:`KeyError` if the object was missing.

        :param header: the header to be removed.
        """
        ...
    
    def update(self: te.Self, iterable: cabc.Iterable[str]) -> None:
        """Add all the headers from the iterable to the set.

        :param iterable: updates the set with the items from the iterable.
        """
        ...
    
    def discard(self, header: str) -> None:
        """Like :meth:`remove` but ignores errors.

        :param header: the header to be discarded.
        """
        ...
    
    def find(self, header: str) -> int:
        """Return the index of the header in the set or return -1 if not found.

        :param header: the header to be looked up.
        """
        ...
    
    def index(self, header: str) -> int:
        """Return the index of the header in the set or raise an
        :exc:`IndexError`.

        :param header: the header to be looked up.
        """
        ...
    
    def clear(self: te.Self) -> None:
        """Clear the set."""
        ...
    
    def as_set(self, preserve_casing: bool = ...) -> set[str]:
        """Return the set as real python set type.  When calling this, all
        the items are converted to lowercase and the ordering is lost.

        :param preserve_casing: if set to `True` the items in the set returned
                                will have the original case like in the
                                :class:`HeaderSet`, otherwise they will
                                be lowercase.
        """
        ...
    
    def to_header(self) -> str:
        """Convert the header set into an HTTP header string."""
        ...
    
    def __getitem__(self, idx: t.SupportsIndex) -> str:
        ...
    
    def __delitem__(self: te.Self, idx: t.SupportsIndex) -> None:
        ...
    
    def __setitem__(self: te.Self, idx: t.SupportsIndex, value: str) -> None:
        ...
    
    def __contains__(self, header: str) -> bool:
        ...
    
    def __len__(self) -> int:
        ...
    
    def __iter__(self) -> cabc.Iterator[str]:
        ...
    
    def __bool__(self) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    


def __getattr__(name: str) -> t.Any:
    ...

