"""
This type stub file was generated by pyright.
"""

import codecs
import re
import sys
import typing as t
from collections import deque
from traceback import format_exception_only
from markupsafe import escape

"""Object representations for debugging purposes. Unlike the default
repr, these expose more information and produce HTML instead of ASCII.

Together with the CSS and JavaScript of the debugger this gives a
colorful and more compact output.
"""
missing = ...
_paragraph_re = ...
RegexType = ...
HELP_HTML = ...
OBJECT_DUMP_HTML = ...
def debug_repr(obj: object) -> str:
    """Creates a debug repr of an object as HTML string."""
    ...

def dump(obj: object = ...) -> None:
    """Print the object details to stdout._write (for the interactive
    console of the web debugger.
    """
    ...

class _Helper:
    """Displays an HTML version of the normal help, for the interactive
    debugger only because it requires a patched sys.stdout.
    """
    def __repr__(self) -> str:
        ...
    
    def __call__(self, topic: t.Any | None = ...) -> None:
        ...
    


helper = ...
class DebugReprGenerator:
    def __init__(self) -> None:
        ...
    
    list_repr = ...
    tuple_repr = ...
    set_repr = ...
    frozenset_repr = ...
    deque_repr = ...
    def regex_repr(self, obj: t.Pattern[t.AnyStr]) -> str:
        ...
    
    def string_repr(self, obj: str | bytes, limit: int = ...) -> str:
        ...
    
    def dict_repr(self, d: dict[int, None] | dict[str, int] | dict[str | int, int], recursive: bool, limit: int = ...) -> str:
        ...
    
    def object_repr(self, obj: t.Any) -> str:
        ...
    
    def dispatch_repr(self, obj: t.Any, recursive: bool) -> str:
        ...
    
    def fallback_repr(self) -> str:
        ...
    
    def repr(self, obj: object) -> str:
        ...
    
    def dump_object(self, obj: object) -> str:
        ...
    
    def dump_locals(self, d: dict[str, t.Any]) -> str:
        ...
    
    def render_object_dump(self, items: list[tuple[str, str]], title: str, repr: str | None = ...) -> str:
        ...
    


